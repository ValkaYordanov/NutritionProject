@model NutritionApp.Models.ViewModels.IntakeViewModel

@{
    ViewData["Title"] = "Create";
    int prev = ViewBag.Count + 1;
    int next = ViewBag.Count - 1;
    var day = ViewBag.theDay;

}

<div id="day">
    <h3>
        <a asp-action="Create" asp-route-id="@prev"><img src="~/images/prev.svg" /></a>
        <span>
            @{
                if (ViewBag.Count <= 0)
                {
                    @:Today
                }
                else if (ViewBag.Count == 1)
                {
                    @:Yesterday
                }
                else
                {
                    @ViewBag.theDay.ToString("dd/MM")
                }
            }
        </span>
        <input type="date" id="datepicker" data-day="@day" onchange="datepicked(this);" />
        @{ if (next >= 0)
            {
                <a asp-action="Create" asp-route-id="@next"><img src="~/images/next.svg" /></a>
            }
            else
            {
                <a asp-action="Create" style="pointer-events: none; opacity: 0.1;"><img src="~/images/next.svg" /></a>
            }
        }
    </h3>
</div>

<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>



            <input asp-for="UserId" class="form-control" type="hidden">
            <input asp-for="Day" class="form-control" type="hidden" value="@ViewBag.theDay" />


            <div class="flexContainer">

                <div class="form-group searchFoodField" id="searchFoodContainer">
                    <label class="control-label">Product/Meal</label>
                    <input id="searchFoodsInput" class="form-control" onkeyup="searchForFoods(this.value, '@Model.UserId')" autocomplete="off" placeholder="Search for food or meal">
                    <input asp-for="Type" type="hidden" />
                    <input asp-for="ItemId" type="hidden" />

                    <span class="text-danger"></span>
                </div>

                <div class="form-group gramsField" id="quantityContainer">
                    <label asp-for="Quantity" class="control-label">Grams</label>
                    <input asp-for="Quantity" class="form-control" autocomplete="off" inputmode="numeric" />

                </div>

            </div>
            <span asp-validation-for="Quantity" class="text-danger"></span>
            <span asp-validation-for="Type" class="text-danger"></span>
            <div class="form-group">
                <input type="submit" value="Eat food" class="btn btn-primary" disabled/>



            </div>
        </form>
    </div>
</div>
<hr />
<h2 id="foodsHeadline">Recent Intakes</h2>
<div class="food-listing">
    <table class="table">
        <thead>
            <tr>
                <th>
                    @*@Html.DisplayNameFor(model => model.Quantity)*@
                    Grams
                </th>
                <th></th>
                <th>
                    @*@Html.DisplayNameFor(model => model.Type)*@
                    Product/Meal
                </th>
                <th>Kcal</th>

            </tr>
        </thead>
        <tbody>
            @{bool anyUserIntakes = false; }
            @foreach (var item in Model.Intakes.Reverse())
            {
                if (item.UserId == Model.UserId)
                {
                    anyUserIntakes = true;
                    if (item.Meal != null)
                    {
                        if (item.Meal.UserId == Model.UserId)
                        {
                            <tr class="userIntake" onclick="addToInput('@item.Meal.MealName', 'meal',@item.Meal.MealId, '@Decimal.Truncate(item.Quantity)'); addSelectedStyle(this);">
                                <td>
                                    @Decimal.Truncate(item.Quantity)
                                </td>
                                <td>
                                    <img src="/images/meal.svg" alt="Meal" />
                                </td>
                                <td>
                                    @item.Meal.MealName
                                </td>
                                <td>
                                    @*@{int sum = 0;
                                    foreach(var ingredient in @item.Meal.Ingredients)
                                    {
                                            sum += ingredient.Product.Kcal;
                                                                                 } }
                                    @sum*@
                                </td>

                            </tr>
                        }
                    }
                    if (item.Product != null)
                    {

                        <tr class="userIntake" onclick="addToInput('@item.Product.ProductName', 'product', @item.Product.ProductId, '@Decimal.Truncate(item.Quantity)'); addSelectedStyle(this);">
                            <td>
                                @Decimal.Truncate(item.Quantity)
                                                         </td>
                            <td>
                                <img src="/images/product.svg" alt="Food" />
                            </td>
                            <td>
                                @item.Product.ProductName
                            </td>
                            <td class="kcal">@(Decimal.Truncate(item.Product.Kcal / 100M * item.Quantity)) </td>
                        </tr>
                    }


                }
            }
            @if (!anyUserIntakes)
            {
                <tr>
                    <td>
                        You havent added any intakes yet
                    </td>
                </tr>
            }

        </tbody>
    </table>
</div>

<partial name="_navigation" />

<script>

 

    function searchForFoods(input, currentUserId) {
        resetSearchedFoods();
        if (input !== "") {
            const path = "http://localhost:44351/Intakes/SelectFromSp?";
            document.querySelector("input[type='submit']").disabled = false;
            document.querySelector("#foodsHeadline").innerHTML = "Select food"

            console.log(input, currentUserId);
        
            const inputDec = "Input=";
            const UserIdDec = "&UserId=";

            let url = `${path}${inputDec}${input}${UserIdDec}${currentUserId}`;
            console.log(url);
            fetch(url)
                .then(response => response.json())
                .then(data => {

                    console.log(data);

                   
                    showUserIntakes(false);

                    data.productList.forEach(obj => addFoodOption(obj, 'product', `${input}`))
                    data.mealList.forEach(obj => addFoodOption(obj, 'meal', `${input}`))
                    highlightInput();
                });
        } else {
            document.querySelector("input[type='submit']").disabled = true;
            document.querySelector("#foodsHeadline").innerHTML = "Recent intakes";
            showUserIntakes(true);
        }
    }

    function resetSearchedFoods() {
        let tableBody = document.querySelector("tbody");
        let searchedFoods = tableBody.querySelectorAll("tr:not(.userIntake)")
        searchedFoods.forEach(food => {
           tableBody.removeChild(food);
        })
    }

    function showUserIntakes(show) {
        let userIntakes = document.querySelectorAll(".userIntake");
                userIntakes.forEach(intake => {
                   if (show) {      
                intake.style.display = "table-row";
            } else {
                intake.style.display = "none";
            }
        })
    }


    function addFoodOption(food, type, input) {
        
        if (type == 'product') {
            let barcode = "";
            if (food.gtin) {
                barcode = `<span class="fadeString">${food.gtin}</span>`
            }
                        document.querySelector("tbody").innerHTML += `
             <tr onclick="addToInput('${food.productName}', '${type}', ${food.productId}, '100');addSelectedStyle(this);">
                    <td >
                        100
                    </td>
                    <td>
                        <img src="/images/product.svg" alt="Product" />
                    </td>
<td > <div>${food.productName}</div> ${barcode} </td>
                    <td>${food.kcal}</td>

                </tr>`

        }
        if (type == 'meal') {
            document.querySelector("tbody").innerHTML += `
             <tr onclick="addToInput('${food.mealName}', '${type}',${food.mealId}, '100')";addSelectedStyle(this); >
                    <td >
                        100
                    </td>
                    <td>
                       <img src="/images/meal.svg" alt="Meal" />
                    </td>
<td> <div> ${food.mealName}</div></td>
                    <td>${food.mealId}</td>

                </tr>`


        }


    }

   

    function addToInput(foodName, addedType, foodId, foodQuantity) {
        const searchFoodContainer = document.querySelector("#searchFoodContainer");
        const type = searchFoodContainer.querySelector("input[name='Type']");
        const id = searchFoodContainer.querySelector("input[name='ItemId']");
        const quantity = document.querySelector("input[name='Quantity']");
        document.querySelector("input[type='submit']").disabled = false;
        // Save values
        type.value = addedType;
        id.value = foodId;
        searchFoodsInput.value = foodName;
        quantity.value = foodQuantity;
        
        if (!isInViewport(searchFoodContainer)) {
            searchFoodContainer.scrollIntoView({ behavior: "smooth", block: "start", inline: "nearest" });
        }
    }


    function addSelectedStyle(elem) {
        let allSelected = document.querySelectorAll(".selectedRow");
        if (allSelected.length != 0) {
            allSelected.forEach(element => element.classList.remove('selectedRow'));
       }
        elem.classList.toggle('selectedRow');
    }

    function isInViewport(el) {
        const rect = el.getBoundingClientRect();
        return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth)
                    );
    }


    function highlightInput() {
        var searchInput = document.querySelector('#searchFoodsInput');

        let rows = document.querySelectorAll("tbody tr");
        rows.forEach(function (row) {
            let foodName = row.querySelector(":nth-child(3) div");
            var regex = new RegExp(searchInput.value, 'gi')
            var response = foodName.innerText.replace(regex, function (str) {
                return "<span class='highlightString'>" + str + "</span>"
            })
            foodName.innerHTML = response
        });
    }


    function datepicked(elm) {
        var chMonth = elm.value.split('-')[1];
        var chDay = elm.value.split('-')[2];

        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!

        var first = mm + '/' + dd + '/2021';

        var second = '' + chMonth + '/' + chDay + '/2021';
        var diff = datediff(parseDate(first), parseDate(second));


        var dayurl = window.location.origin + "/Intakes/Create/" + (diff * -1);

        window.location.href = dayurl;
    }

    function parseDate(str) {
        var mdy = str.split('/');
        return new Date(mdy[2], mdy[0] - 1, mdy[1]);
    }

    function datediff(first, second) {
        // Take the difference between the dates and divide by milliseconds per day.
        // Round to nearest whole number to deal with DST.
        return Math.round((second - first) / (1000 * 60 * 60 * 24));
    }

</script>



@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
