@model NutritionApp.Models.ViewModels.IntakeViewModel

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Intake</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="UserId" class="control-label"></label>
                <select asp-for="UserId" class="form-control" asp-items="ViewBag.UserId"></select>
            </div>

            <div class="form-group">
                <label asp-for="Day" class="control-label"></label>
                <input asp-for="Day" class="form-control" />
                <span asp-validation-for="Day" class="text-danger"></span>
            </div>


            <div class="form-group" id="searchFoodContainer">
                <label class="control-label">Search for food</label>
                <input id="searchFoodsInput" class="form-control" onkeyup="searchForFoods(this.value, '1631d3b8-9724-4baf-a053-227c5ac06df6')" autocomplete="off">
                <input asp-for="Type" type="hidden" />
                <input asp-for="ItemId" type="hidden" />
                
                <span class="text-danger"></span>
            </div>

            <div class="form-group" id="quantityContainer">
                <label asp-for="Quantity" class="control-label"></label>
                <input asp-for="Quantity" class="form-control"  />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>

            <div class="form-group">
                <input type="submit" value="Eat" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<h2>Resent/Search</h2>
<div id="foodOptions">
</div>
<table class="table">
    <thead>
        <tr>
            <th>
                @*@Html.DisplayNameFor(model => model.Quantity)*@
                Grams
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.Type)*@
                Product/Meal
            </th>
            <th>Kcal</th>
        
        </tr>
    </thead>
    <tbody>
        @foreach (var item in ViewBag.Intakes)
        {
            if (item.Meal != null)
            {
                <tr onclick="console.log('meal'); addToInput(@item.Meal.MealId, '@item.Meal.MealName', '@item.Quantity', 'meal');">
                    <td >
                        @item.Quantity
                    </td>
                    <td>
                        @item.Meal.MealName
                    </td>
                    <td></td>
                    
                </tr>
            }
            if (item.Product != null)
            {
    <tr onclick="console.log('produ'); addToInput(@item.Product.ProductId, '@item.Product.ProductName', '@item.Quantity', 'product');">
        <td >
            @item.Quantity
        </td>
        <td>
            @item.Product.ProductName
        </td>
        <td></td>
    </tr>
            }


        }
    </tbody>
</table>


<script>

    function searchForFoods(input, currentUserId) {
        if (input !== "") {
            const path = "https://localhost:44351/Intakes/SelectFromSp?";
            const inputDec = "Input=";
            const UserIdDec = "&UserId=";

            let url = `${path}${inputDec}${input}${UserIdDec}${currentUserId}`;
            console.log(url);
            fetch(url)
                .then(response => response.json())
                .then(data => {

                    console.log(data);
                    document.querySelector("#foodOptions").innerHTML = '';

                    data.productList.forEach(obj => addFoodOption(obj, 'product'))
                    data.mealList.forEach(obj => addFoodOption(obj, 'meal'))
                });
                    }
    }

    function addFoodOption(food, type) {
        console.log(food);
        if (type == 'product') {
            console.log(food.productId);
            document.querySelector("#foodOptions").innerHTML += `
            <p onclick="chooseFoodFromSearchDropdown(this, '${type}', ${food.productId})">${food.productName}</p>
            `;
        }
        if (type == 'meal') {
            console.log(food.mealId);
            document.querySelector("#foodOptions").innerHTML += `
            <p onclick="chooseFoodFromSearchDropdown(this, '${type}',${food.mealId})">${food.mealName}</p>
            `;
        }



    }

    function chooseFoodFromSearchDropdown(food, addedType, foodId) {
        addChoosenFoodToInputFields(addedType, foodId, `${food.innerHTML}`);    
        foodOptions.innerHTML = '';
    }

    function addChoosenFoodToInputFields(addedType, foodId, foodName) {
        const searchFoodContainer = document.querySelector("#searchFoodContainer");
        const type = searchFoodContainer.querySelector("input[name='Type']");
        const id = searchFoodContainer.querySelector("input[name='ItemId']");

        // Save values
        type.value = addedType;
        id.value = foodId;
        searchFoodsInput.value = foodName;
    }


    function addToInput(prevIntakeId, prevIntakeName, prevIntakeQuantity, type) {
        console.log(prevIntakeId);
        addChoosenFoodToInputFields(`${type}`, prevIntakeId, prevIntakeName);
        //let dotyfiedQuantity = parseInt(prevIntakeQuantity.replace(",", "."));
        document.querySelector("input[name='Quantity']").value = prevIntakeQuantity;
    }
</script>

<style>
    #foodOptions {
        background-color: lightblue;
    }
</style>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
