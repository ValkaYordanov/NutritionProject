@model IEnumerable<NutritionApp.Models.Intake>

@{
    ViewData["Title"] = "Overview";

    int prev = ViewBag.Count + 1;
    int next = ViewBag.Count - 1;
    var day = ViewBag.theDay;
    var p = 1;

}

<div id="day">
    <h3>
        <a asp-action="Index" asp-route-id="@prev"><img src="~/images/prev.svg" /></a>
        <span>
            @{
                if (ViewBag.Count <= 0)
                {
                    @:Today
                }
                else if (ViewBag.Count == 1)
                {
                    @:Yesterday
                }
                else
                {
                    @ViewBag.theDay.ToString("dd/MM")
                }
            }
        </span>
        <input type="date" id="datepicker" data-day="@day" onchange="datepicked(this);" />
        @{ if (next >= 0)
            {
                <a asp-action="Index" asp-route-id="@next"><img src="~/images/next.svg" /></a>
            }
            else
            {
                <a asp-action="Index" style="pointer-events: none; opacity: 0.1;"><img src="~/images/next.svg" /></a>
            }
        }
    </h3>

</div>


<section class="overview-graphs">
    <div id="top">
        <div id="kcal-goal">
            <p>GOAL</p>
            <h4 class="goal">@ViewBag.KcalGoal</h4>
            <p>kcal</p>
        </div>
        <div id="appleStyle">
            <p>EATEN</p>
            <input id="toggle" type="checkbox" />
            <label id="control" for="toggle" onclick="toggleView();"></label>
            <div id="container"></div>
        </div>
    </div>
    <div id="graphs">
        <div class="graph">
            <div class="bar-wrap kcal">
                <div class="bar"></div>
            </div>
            <div class="graph-text">
                <p>0</p>
                <span>Kcal</span>
            </div>
        </div>
        <div class="graph">
            <div class="bar-wrap carbs">
                <div class="bar"></div>
            </div>
            <div class="graph-text">
                <p>0</p>
                <span>Carbs</span>
            </div>
        </div>
        <div class="graph">
            <div class="bar-wrap fats">
                <div class="bar"></div>
            </div>
            <div class="graph-text">
                <p>0</p>
                <span>Fat</span>
            </div>
        </div>
        <div class="graph">
            <div class="bar-wrap proteins">
                <div class="bar"></div>
            </div>
            <div class="graph-text">
                <p>0</p>
                <span>Protein</span>
            </div>
        </div>
    </div>

</section>
<div class="food-listing">
    <table class="table">
        <thead>
            <tr>
                <th>
                    Grams
                </th>
                <th>
                    Product / Meal
                </th>
                <th>
                    Kcal
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @{ if (Model.Any())
                {
            foreach (var item in Model)
            {

                <tr onclick="location.href = '@(Url.Action("Edit", "Intakes", new { id = @item.IntakeId }))'">

@*<table class="table">
    <thead>
        <tr>
            <th>
                Grams
            </th>
            <th>
                Product / Meal
            </th>
            <th>
                Kcal
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {

            <tr onclick="location.href = '@(Url.Action("Edit", "Intakes",new { id= @item.IntakeId }))'">*@

                <td class="qnt">
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>
                <td class="name">

                    @Html.DisplayFor(modelItem => item.Meal.MealName)
                    @Html.DisplayFor(modelItem => item.Product.ProductName)
                </td>
                <td class="kcal-col" data-qnt="@Html.DisplayFor(modelItem => item.Quantity)" data-fat="@{
                            var i2 = 0;
                        }
                        @foreach (var listitem in ViewData["Fats"] as List<decimal>)
                        {
                            i2++;
                            @if (i2 == p)
                            {
                                    @listitem

                            }
                        }" data-carbs="@{
    var i3 = 0;
                        }
                        @foreach (var listitem in ViewData["Carbs"] as List<decimal>)
                        {
                            i3++;
                            @if (i3 == p)
                            {
                                    @listitem
                            }
                        }" data-proteins="@{
    var i4 = 0;
                        }
                        @foreach (var listitem in ViewData["Proteins"] as List<decimal>)
                        {
                            i4++;
                            @if (i4 == p)
                            {
                                    @listitem
                            }
                        }"
                    data-kcal="@{
                            var i5 = 0;
                        }
                        @foreach (var listitem in ViewData["KcalList"] as List<int>)
                        {
                            i5++;
                            @if (i5 == p)
                            {
                                    @listitem

                            }
                        }

                        @{
                            p++;
                        }">

                    <p class="kcal"></p>

                </td>




                </tr>
                                }}
                            else
                            {
                                <tr class="defaultMessage">
                                    <td>You haven't added any intakes yet</td>
                                </tr>
                            }
                            }


        </tbody>
    </table>
</div>
<partial name="_navigation" />
<script>
    let kcalCol = document.querySelectorAll('.kcal-col');
    let kcalP = document.querySelectorAll('.kcal-col .kcal');
    let kcalBar = document.querySelector('.kcal .bar');
    let carbsBar = document.querySelector('.carbs .bar');
    let fatsBar = document.querySelector('.fats .bar');
    let proteinsBar = document.querySelector('.proteins .bar');
    const fatText = document.querySelector('.bar-wrap.fats ~ .graph-text p');
    const carbText = document.querySelector('.bar-wrap.carbs ~ .graph-text p');
    const proteinText = document.querySelector('.bar-wrap.proteins ~ .graph-text p');
    const kcalText = document.querySelector('.bar-wrap.kcal ~ .graph-text p');
    const kcalGoal = document.querySelector('#kcal-goal .goal');
    const appleStyle = document.getElementById('appleStyle')
    const switchView = document.getElementById('toggle');


    function fetchGraphData(remaining) {

        var totalProteins = 0;
        var totalFats = 0;
        var totalCarbs = 0;
        var totalKcal = 0;

        //get totals - looping through data
        for (i = 0; i < kcalCol.length; ++i) {
            var carbs = kcalCol[i].getAttribute('data-carbs');
            var fats = kcalCol[i].getAttribute('data-fat');
            var proteins = kcalCol[i].getAttribute('data-proteins');
            var kcal = kcalCol[i].getAttribute('data-kcal');
            var qnt = kcalCol[i].getAttribute('data-qnt');

            //totalKcal += parseInt(kcalCol[i].querySelector(".kcal").innerText);
            calqulatedKcal = Math.floor((parseFloat(kcal) / 100) * parseFloat(qnt));
            calculatedCarb = Math.floor((parseFloat(carbs) / 100) * parseFloat(qnt));
            calculatedProteins = Math.floor((parseFloat(proteins) / 100) * parseFloat(qnt));
            calculatedFats = Math.floor((parseFloat(fats) / 100) * parseFloat(qnt));

            totalProteins += calculatedProteins;
            totalFats += calculatedFats;
            totalCarbs += calculatedCarb;
            totalKcal += calqulatedKcal;
            //show calculated kcal on frontend
            kcalCol[i].querySelector(".kcal").innerText = calqulatedKcal;
        }

        //calculate percentages
        var goal = parseInt(kcalGoal.innerText);
        var carbgoal = Math.floor((goal / 2) / 4);
        var carbPct = (totalCarbs / carbgoal) * 100;
        var kcalPct = ((totalKcal / goal) * 100);
        var fatPct = ((totalFats / 60) * 100);
        var proteinPct = ((totalProteins / 49) * 100);



        if (switchView.checked) {
            appleStyle.querySelector('p').innerText = "REMAIN";
            //show totals on frontend
            fatText.innerText = 60 - totalFats;
            proteinText.innerText = 49 - totalProteins;
            carbText.innerText = carbgoal - totalCarbs;
            kcalText.innerText = goal - totalKcal;

            //show percentages in graph
            carbsBar.style.height = "" + (100 - carbPct) + "%";
            fatsBar.style.height = "" + (100 - fatPct) + "%";
            proteinsBar.style.height = "" + (100 - proteinPct) + "%";
            kcalBar.style.height = "" + (100 - kcalPct) + "%";

        } else {
            appleStyle.querySelector('p').innerText = "EATEN";
            //show totals on frontend
            fatText.innerText = totalFats;
            proteinText.innerText = totalProteins;
            carbText.innerText = totalCarbs;
            kcalText.innerText = totalKcal;

            //show percentages in graph
            carbsBar.style.height = "" + carbPct + "%";
            fatsBar.style.height = "" + fatPct + "%";
            proteinsBar.style.height = "" + proteinPct + "%";
            kcalBar.style.height = "" + kcalPct + "%";
        }
    }
    fetchGraphData();
    function toggleView() {
        setTimeout(function () {
            fetchGraphData();
        }, 100);
    }

    function datepicked(elm) {
        //console.log(elm.value);
        //console.log(elm.getAttribute('data-day'));
        
        

        var chMonth = elm.value.split('-')[1];
        var chDay = elm.value.split('-')[2];

        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!

        var first = mm + '/' + dd + '/2021';
        //console.log(today);
        //var month = now.split('-')[1];
        //var day = now.split('-')[0];


        //var first = '' + month + '/' + day + '/2021';
        console.log(first);
        var second = '' + chMonth + '/' + chDay + '/2021';
        console.log(second);
        var diff = datediff(parseDate(first), parseDate(second));
        console.log(diff * -1);

        
        var dayurl = window.location.origin + "/overview/index/" + (diff * -1);

        window.location.href = dayurl;
    }

    function parseDate(str) {
        var mdy = str.split('/');
        return new Date(mdy[2], mdy[0] - 1, mdy[1]);
    }

    function datediff(first, second) {
        // Take the difference between the dates and divide by milliseconds per day.
        // Round to nearest whole number to deal with DST.
        return Math.round((second - first) / (1000 * 60 * 60 * 24));
    }

</script>
